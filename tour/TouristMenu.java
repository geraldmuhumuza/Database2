/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tour;

/**
 *
 * @author Jrad
 */
import com.itextpdf.text.BadElementException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
public class TouristMenu extends javax.swing.JFrame {
Connection con; // for establishing a connection
    Statement st;  //sql statement
    String cs;  //database path
    ResultSet rs; //for the resultset
    
    String user;  //database username
    String password;  //database password
    String query;
    /**
     * Creates new form TouristMenu
     */
    ChangeName changename = new ChangeName();
    public TouristMenu() {
        con = null;
        st = null;
        //statement = null;
        rs = null;
        cs = "jdbc:mysql://localhost:3306/mydb";
        user = "root";
        password = "@tQbfjotlD//1q";
        initComponents();
        registerDriverAndst();
    }
private void registerDriverAndst(){
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(cs, user, password);
            st = con.createStatement();
        }
        catch (SQLException ex)
        {
            ex.printStackTrace();
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        menufile = new javax.swing.JMenu();
        menuback = new javax.swing.JMenuItem();
        menuexit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuchangepassword = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuchangecontact = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuview = new javax.swing.JMenu();
        menupromotion = new javax.swing.JMenuItem();
        menutour = new javax.swing.JMenuItem();
        menurooms = new javax.swing.JMenuItem();
        menuflight = new javax.swing.JMenuItem();
        menubook = new javax.swing.JMenu();
        menubookroom = new javax.swing.JMenuItem();
        menubooktour = new javax.swing.JMenuItem();
        menuflightbooking = new javax.swing.JMenuItem();
        menupayment = new javax.swing.JMenu();
        menuhelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menufile.setText("File");

        menuback.setText("Back");
        menufile.add(menuback);

        menuexit.setText("Exit");
        menufile.add(menuexit);

        jMenuBar1.add(menufile);

        jMenu2.setText("Edit");

        menuchangepassword.setText("Change name");
        menuchangepassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuchangepasswordActionPerformed(evt);
            }
        });
        jMenu2.add(menuchangepassword);

        jMenuItem1.setText("Change Password");
        jMenu2.add(jMenuItem1);

        menuchangecontact.setText("Change email");
        jMenu2.add(menuchangecontact);

        jMenuItem3.setText("Change Contact");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        menuview.setText("View");

        menupromotion.setText("Promotions");
        menupromotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menupromotionActionPerformed(evt);
            }
        });
        menuview.add(menupromotion);

        menutour.setText("Tours Available");
        menutour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menutourActionPerformed(evt);
            }
        });
        menuview.add(menutour);

        menurooms.setText("Rooms Available");
        menurooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuroomsActionPerformed(evt);
            }
        });
        menuview.add(menurooms);

        menuflight.setText("Flights Available");
        menuflight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuflightActionPerformed(evt);
            }
        });
        menuview.add(menuflight);

        jMenuBar1.add(menuview);

        menubook.setText("Booking");

        menubookroom.setText("Room Booking");
        menubook.add(menubookroom);

        menubooktour.setText("Tour Booking");
        menubook.add(menubooktour);

        menuflightbooking.setText("Flight Booking");
        menubook.add(menuflightbooking);

        jMenuBar1.add(menubook);

        menupayment.setText("Payment");
        jMenuBar1.add(menupayment);

        menuhelp.setText("Help");
        jMenuBar1.add(menuhelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuroomsActionPerformed
       try{
          
          
          Document doc =new Document(PageSize.A4.rotate());
            PdfWriter.getInstance(doc, new FileOutputStream("room.pdf"));
            
            doc.open();
           try {
               doc.add(Image.getInstance("C:\\Users\\Jrad\\Pictures\\logo.jpg"));
           } catch (BadElementException ex) {
               Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
               Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           Paragraph para =new Paragraph("GERRALD TOURS");
            para.setAlignment(24);
            para.setIndentationLeft(CENTER_ALIGNMENT);
            //para.setFont(font);
            doc.add(para);
           PdfPTable table = new PdfPTable(2);
            
            Phrase phrase1 = new Phrase("ROOM");
            PdfPCell cell1 = new PdfPCell(phrase1);
            cell1.setNoWrap(false);
            table.addCell(cell1);
            
            Phrase phrase2 = new Phrase("PRICE");
            PdfPCell cell2 = new PdfPCell(phrase2);
            cell2.setNoWrap(false);
            table.addCell(cell2);
            

            
            query="SELECT RoomName,Price FROM room";
          rs = st.executeQuery(query);
            while(rs.next()){
                table.addCell(rs.getString("RoomName"));
                table.addCell(rs.getString("Price"));
                
            }
            doc.add(table);
        
        if(Desktop.isDesktopSupported()){
            try{
                File myfile = new File("room.pdf");
                Desktop.getDesktop().open(myfile);
                
            }catch(IOException ex){                
            }
            doc.close();
      }
      }
      catch(SQLException ex){
          ex.printStackTrace();
      } 
      catch (FileNotFoundException | DocumentException ex) {
        Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_menuroomsActionPerformed

    private void menupromotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menupromotionActionPerformed
      try{
          
          
          Document doc =new Document(PageSize.A4.rotate());
            PdfWriter.getInstance(doc, new FileOutputStream("promotion.pdf"));
            
            doc.open();
            PdfPTable table = new PdfPTable(3);
            
            Phrase phrase1 = new Phrase("DESCRIPTION");
            PdfPCell cell1 = new PdfPCell(phrase1);
            cell1.setNoWrap(false);
            table.addCell(cell1);
            
            Phrase phrase2 = new Phrase("DISCOUNT");
            PdfPCell cell2 = new PdfPCell(phrase2);
            cell2.setNoWrap(false);
            table.addCell(cell2);
            
            Phrase phrase3 = new Phrase("END DATE");
            PdfPCell cell3 = new PdfPCell(phrase3);
            cell3.setNoWrap(false);
            table.addCell(cell3);
            
            query="SELECT decription,discount,endDate FROM promotions";
          rs = st.executeQuery(query);
            while(rs.next()){
                table.addCell(rs.getString("decription"));
                table.addCell(rs.getString("discount"));
                table.addCell(rs.getString("endDate"));
            }
            doc.add(table);
        
        if(Desktop.isDesktopSupported()){
            try{
                File myfile = new File("promotion.pdf");
                Desktop.getDesktop().open(myfile);
                
            }catch(IOException ex){                
            }
            doc.close();
      }
      }
      catch(SQLException ex){
          ex.printStackTrace();
      } 
      catch (FileNotFoundException | DocumentException ex) {
        Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
    }
      
      
    }//GEN-LAST:event_menupromotionActionPerformed

    private void menutourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menutourActionPerformed
        try{
          
          
          Document doc =new Document(PageSize.A4.rotate());
            PdfWriter.getInstance(doc, new FileOutputStream("tours.pdf"));
            
            doc.open();
            PdfPTable table = new PdfPTable(3);
            
            Phrase phrase1 = new Phrase("DESTINATION");
            PdfPCell cell1 = new PdfPCell(phrase1);
            cell1.setNoWrap(false);
            table.addCell(cell1);
            
            Phrase phrase2 = new Phrase("CATEGORY");
            PdfPCell cell2 = new PdfPCell(phrase2);
            cell2.setNoWrap(false);
            table.addCell(cell2);
            
            Phrase phrase3 = new Phrase("PRICE");
            PdfPCell cell3 = new PdfPCell(phrase3);
            cell3.setNoWrap(false);
            table.addCell(cell3);
            
            query="SELECT destination,category,price FROM tour";
          rs = st.executeQuery(query);
            while(rs.next()){
                table.addCell(rs.getString("destination"));
                table.addCell(rs.getString("category"));
                table.addCell(rs.getString("price"));
            }
            doc.add(table);
        
        if(Desktop.isDesktopSupported()){
            try{
                File myfile = new File("tours.pdf");
                Desktop.getDesktop().open(myfile);
                
            }catch(IOException ex){                
            }
            doc.close();
      }
      }
      catch(SQLException ex){
          ex.printStackTrace();
      } 
      catch (FileNotFoundException | DocumentException ex) {
        Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_menutourActionPerformed

    private void menuflightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuflightActionPerformed
        try{
          
          
          Document doc =new Document(PageSize.A4.rotate());
            PdfWriter.getInstance(doc, new FileOutputStream("flight.pdf"));
            
            doc.open();
            PdfPTable table = new PdfPTable(6);
            
            Phrase phrase1 = new Phrase("FLIGHT NAME");
            PdfPCell cell1 = new PdfPCell(phrase1);
            cell1.setNoWrap(false);
            table.addCell(cell1);
            
            Phrase phrase2 = new Phrase("DESTINATION");
            PdfPCell cell2 = new PdfPCell(phrase2);
            cell2.setNoWrap(false);
            table.addCell(cell2);
            
            Phrase phrase3 = new Phrase("DEPARTURE PLACE");
            PdfPCell cell3 = new PdfPCell(phrase3);
            cell3.setNoWrap(false);
            table.addCell(cell3);
            
            Phrase phrase4 = new Phrase("DEPARTURE TIME");
            PdfPCell cell4 = new PdfPCell(phrase4);
            cell4.setNoWrap(false);
            table.addCell(cell4);
            
            Phrase phrase5 = new Phrase("ARRIVAL DATE AND TIME");
            PdfPCell cell5 = new PdfPCell(phrase5);
            cell5.setNoWrap(false);
            table.addCell(cell5);
            
            Phrase phrase6 = new Phrase("PRICE");
            PdfPCell cell6 = new PdfPCell(phrase6);
            cell6.setNoWrap(false);
            table.addCell(cell6);
            
            query="SELECT flightname,destiname,departureplace,departuretime,arrivaldatetime,price FROM flight";
          rs = st.executeQuery(query);
            while(rs.next()){
                table.addCell(rs.getString("flightname"));
                table.addCell(rs.getString("destiname"));
                table.addCell(rs.getString("departureplace"));
                table.addCell(rs.getString("departuretime"));
                table.addCell(rs.getString("arrivaldatetime"));
                table.addCell(rs.getString("price"));
            }
            doc.add(table);
        
        if(Desktop.isDesktopSupported()){
            try{
                File myfile = new File("flight.pdf");
                Desktop.getDesktop().open(myfile);
                
            }catch(IOException ex){                
            }
            doc.close();
      }
      }
      catch(SQLException ex){
          ex.printStackTrace();
      } 
      catch (FileNotFoundException | DocumentException ex) {
        Logger.getLogger(TouristMenu.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_menuflightActionPerformed

    private void menuchangepasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuchangepasswordActionPerformed
changename.Ain();
    }//GEN-LAST:event_menuchangepasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TouristMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TouristMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TouristMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TouristMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TouristMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem menuback;
    private javax.swing.JMenu menubook;
    private javax.swing.JMenuItem menubookroom;
    private javax.swing.JMenuItem menubooktour;
    private javax.swing.JMenuItem menuchangecontact;
    private javax.swing.JMenuItem menuchangepassword;
    private javax.swing.JMenuItem menuexit;
    private javax.swing.JMenu menufile;
    private javax.swing.JMenuItem menuflight;
    private javax.swing.JMenuItem menuflightbooking;
    private javax.swing.JMenu menuhelp;
    private javax.swing.JMenu menupayment;
    private javax.swing.JMenuItem menupromotion;
    private javax.swing.JMenuItem menurooms;
    private javax.swing.JMenuItem menutour;
    private javax.swing.JMenu menuview;
    // End of variables declaration//GEN-END:variables
}
